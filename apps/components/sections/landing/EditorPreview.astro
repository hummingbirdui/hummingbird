---
import GradientBorderBox from './common/GradientBorderBox.astro';
import SectionWrapper from './common/SectionWrapper.astro';
import SectionHeader from './common/SectionHeader.astro';
import cardImage from '@assets/images/hamster.webp';
import CopyIcon from '@components/icons/CopyIcon.astro';
import CheckIcon from '@components/icons/CheckIcon.astro';
import RefreshIcon from '@components/icons/RefreshIcon.astro';
---

<SectionWrapper id="editor-preview" class="max-w-340">
  <SectionHeader
    title="Extend, donâ€™t eject"
    subtitle="Hummingbird offers layered control. Use our global variables for broad changes or a utility class for precise tweaks. It's designed to be easily extended."
  />

  <div class="flex flex-col md:flex-row items-center gap-6">
    <!-- editor -->
    <div class="p-6 flex flex-col h-100 md:h-138 w-full rounded-2xl bg-[var(--color-gray-900)] overflow-hidden">
      <div class="mb-4 flex items-center justify-between gap-2 border-b border-[var(--color-gray-700)]">
        <h6 class="text-[var(--color-gray-500)] text-base font-bold">Edit the Code Sample</h6>
        <button id="resetBtn" class="ml-auto text-subtle">
          <RefreshIcon />
        </button>
        <button id="copyBtn" class="text-subtle flex items-center justify-center w-8">
          <CopyIcon id="copyIcon" />
          <CheckIcon id="checkIcon" class="hidden text-success" />
        </button>
      </div>
      <div id="editor" class="grow overflow-auto"></div>
    </div>

    <!-- preview -->
    <GradientBorderBox color="warning" class="h-100 md:h-138 w-full rounded-2xl">
      <iframe
        id="preview"
        data-card-img={cardImage.src}
        class="flex items-center h-full w-full justify-center bg-cover bg-center bg-no-repeat
         bg-[url('/images/editor-preview-light.png')] dark:bg-[url('/images/editor-preview-dark.png')]"
        srcdoc={`<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
  <title>Document</title>
</head>
<body id="previewCode" class="flex items-center justify-center min-h-screen bg-transparent">
</body>
</html>`}
      >
      </iframe>
    </GradientBorderBox>
  </div>
</SectionWrapper>

<script>
  import { oneDark } from '@codemirror/theme-one-dark';
  import { basicSetup, EditorView } from 'codemirror';
  import { EditorState } from '@codemirror/state';
  import { html } from '@codemirror/lang-html';
  import cssText from '../../../style.css?inline';
  import { onThemeChange } from '@libs/utils';

  const start = () => {
    const resetButton = document.getElementById('resetBtn') as HTMLButtonElement | null;
    const copyButton = document.getElementById('copyBtn') as HTMLButtonElement | null;
    const copyIcon = document.getElementById('copyIcon') as HTMLElement | null;
    const checkIcon = document.getElementById('checkIcon') as HTMLElement | null;

    const preview = document.getElementById('preview') as HTMLIFrameElement | null;
    if (!preview) return;

    const cardImg = preview.dataset.cardImg ?? '';

    const startCode = `<div class="card p-2 shadow-lg rounded-2xl max-w-64">
  <img src="${cardImg}" class='card-img-top pb-4' alt="Hummingbird" />
  <div class="card-body p-1">
    <h4 class="card-title text-base">10 Fascinating Animal Facts</h4>
    <p class='text-xs'>Discover surprising traits and behaviors from creatures big and small.</p>
  </div>
  <div class="card-footer px-1 flex items-center justify-between">
    <p class="text-xs m-0">12 min read</p>
    <button class='btn btn-text-primary btn-sm'>
      Read more
    </button>
  </div>
</div>`;

    const updatePreview = (code: string) => {
      if (!preview?.contentDocument) return;
      const doc = preview.contentDocument;
      const body = doc.getElementById('previewCode');
      if (!body) return;

      const oldStyle = doc.getElementById('injected-style');
      if (oldStyle) oldStyle.remove();

      const styleEl = doc.createElement('style');
      styleEl.id = 'injected-style';
      styleEl.textContent = cssText;
      doc.head.appendChild(styleEl);

      body.innerHTML = code;

      const htmlEl = doc.documentElement;
      onThemeChange((theme) => {
        htmlEl.classList.toggle('dark', theme === 'dark');
      });
    };

    const init = () => {
      const doc = preview.contentDocument;
      if (!doc || !doc.getElementById('previewCode')) {
        requestAnimationFrame(init);
        return;
      }

      const editorParent = document.getElementById('editor');
      if (!editorParent) return;

      const editor = new EditorView({
        state: EditorState.create({
          doc: startCode,
          extensions: [
            html(),
            basicSetup,
            oneDark,
            EditorView.updateListener.of((update) => {
              if (update.docChanged) {
                const code = update.state.doc.toString();
                updatePreview(code);
              }
            }),
          ],
        }),
        parent: editorParent,
      });

      updatePreview(startCode);

      resetButton?.addEventListener('click', () => {
        editor.dispatch({
          changes: { from: 0, to: editor.state.doc.length, insert: startCode },
        });
        updatePreview(startCode);
      });

      copyButton?.addEventListener('click', async () => {
        const code = editor.state.doc.toString();
        try {
          await navigator.clipboard.writeText(code);

          copyIcon?.classList.add('hidden');
          checkIcon?.classList.remove('hidden');

          setTimeout(() => {
            checkIcon?.classList.add('hidden');
            copyIcon?.classList.remove('hidden');
          }, 1200);
        } catch (err) {
          console.error('Failed to copy: ', err);
        }
      });
    };

    init();
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', start);
  } else {
    start();
  }
</script>
