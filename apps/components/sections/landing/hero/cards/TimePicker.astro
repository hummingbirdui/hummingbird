---
import CardWrapper from '../CardWrapper.astro';

const hours: number[] = Array.from({ length: 12 }, (_, i) => (i + 1) % 12 || 12);
const minutes: number[] = Array.from({ length: 60 }, (_, i) => i);
const periods: string[] = ['AM', 'PM'];
const infiniteHours = [...hours, ...hours, ...hours];
const infiniteMinutes = [...minutes, ...minutes, ...minutes];
---

<CardWrapper id="time-picker" color="primary" class="shadow-primary/5 dark:shadow-primary-darker/5">
  <div class="flex justify-between items-center mb-6">
    <h3 class="mb-0 text-default text-base font-bold">Picker</h3>
    <p id="time-display" class="mb-0 text-base text-muted font-bold">12:30 AM</p>
  </div>

  <div class="flex gap-2 grow justify-center overflow-hidden">
    <div id="hours" class="h-full w-10 overflow-y-scroll snap-y snap-mandatory scrollbar-hide">
      {
        infiniteHours.map((h, i) => (
          <div
            class="w-full h-10 text-sm text-default flex items-center justify-center rounded-md cursor-pointer snap-start"
            data-value={h}
          >
            {h}
          </div>
        ))
      }
    </div>

    <div id="minutes" class="h-full w-10 overflow-y-scroll snap-y snap-mandatory scrollbar-hide">
      {
        infiniteMinutes.map((m, i) => (
          <div
            class="w-full h-10 text-sm flex items-center justify-center rounded-md cursor-pointer snap-start"
            data-value={m}
          >
            {m.toString().padStart(2, '0')}
          </div>
        ))
      }
    </div>

    <div id="periods" class="h-full w-10 flex flex-col">
      {
        periods.map((p) => (
          <div
            class="w-full h-10 text-sm text-default flex items-center justify-center rounded-md cursor-pointer"
            data-value={p}
          >
            {p}
          </div>
        ))
      }
    </div>
  </div>
</CardWrapper>

<script>
  const display = document.getElementById('time-display') as HTMLElement;

  let hour: number = 12;
  let minute: number = 30;
  let period: string = 'AM';

  function updateDisplay() {
    if (display) {
      display.textContent = `${hour}:${minute.toString().padStart(2, '0')} ${period}`;
    }
  }

  function attachInfiniteHandler(containerEl: HTMLElement, type: 'hour' | 'minute', baseLength: number) {
    if (!containerEl) return;

    const items = Array.from(containerEl.children) as HTMLElement[];
    const itemHeight = items[0].offsetHeight ?? 0;
    const middleIndex = Math.floor(items.length / 3);
    containerEl.scrollTop = middleIndex * itemHeight;

    function highlight(item: HTMLElement) {
      items.forEach((el) => el.classList.remove('bg-blue-500', 'text-white'));
      item.classList.add('bg-blue-500', 'text-white');
    }

    function selectValue(item: HTMLElement) {
      const value = item.dataset.value;
      if (!value) return;
      if (type === 'hour') hour = parseInt(value);
      if (type === 'minute') minute = parseInt(value);
      highlight(item);
      updateDisplay();
    }

    function updateSelection() {
      const scrollTop = containerEl.scrollTop;
      const index = Math.round(scrollTop / itemHeight);
      const item = items[index];
      if (item) selectValue(item);

      // loop scroll reset
      if (index < baseLength) {
        containerEl.scrollTop += baseLength * itemHeight;
      } else if (index >= 2 * baseLength) {
        containerEl.scrollTop -= baseLength * itemHeight;
      }
    }

    containerEl.addEventListener('scroll', () => {
      requestAnimationFrame(updateSelection);
    });

    items.forEach((item, i) => {
      item.addEventListener('click', () => {
        containerEl.scrollTo({ top: i * itemHeight, behavior: 'smooth' });
      });
    });

    if (items[middleIndex]) selectValue(items[middleIndex]);
  }

  function attachPeriodHandler(containerEl: HTMLElement | null) {
    if (!containerEl) return;
    const items = Array.from(containerEl.children) as HTMLElement[];

    function selectPeriod(item: HTMLElement) {
      items.forEach((el) => el.classList.remove('bg-muted'));
      item.classList.add('bg-muted');
      period = item.dataset.value ?? 'AM';
      updateDisplay();
    }

    items.forEach((item) => item.addEventListener('click', () => selectPeriod(item)));

    if (items[0]) selectPeriod(items[0]);
  }

  attachInfiniteHandler(document.getElementById('hours') as HTMLElement, 'hour', 12);
  attachInfiniteHandler(document.getElementById('minutes') as HTMLElement, 'minute', 60);
  attachPeriodHandler(document.getElementById('periods') as HTMLElement);

  updateDisplay();
</script>
