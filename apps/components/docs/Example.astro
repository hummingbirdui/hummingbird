---
import AppCode from '@components/common/AppCode.astro';

interface Props {
  code: string | string[];
  class?: string;
  id?: string;
  lang?: any;
  showMarkup?: boolean;
  showPreview?: boolean;
}

const { code: rawCode, class: className, id, lang = 'html', showMarkup = true, showPreview = true } = Astro.props;

function normalizeCode(input: unknown): string {
  if (typeof input === 'string') return input;
  if (Array.isArray(input)) return input.join('\n');
  return String((input as any)?.value ?? input ?? '');
}

const original: string = normalizeCode(rawCode);
---

<div class={`mb-6 ${showPreview ? 'border border-light rounded-2xl' : ''}`} id={id}>
  {
    showPreview && (
      <div class={`px-6 py-8 bg-default rounded-t-2xl ${className ?? ''}`}>
        <Fragment set:html={original} />
      </div>
    )
  }
  {
    showMarkup && (
      <div class={`code-block relative grid ${showPreview ? 'bg-subtle rounded-b-2xl p-6' : ''}`}>
        {showPreview && (
          <div class="flex justify-between items-center mb-4">
            <p class="mb-0 font-semibold text-muted">HTML</p>
            <div>
              <button class="btn btn-text-neutral btn-sm gap-1" data-btn-expand>
                <span class="hidden sm:block" data-btn-expand-text>
                  Expand Code
                </span>
              </button>
              <button class="btn btn-text-neutral btn-sm sm:min-w-[115.78px]" data-btn-copy>
                <span class="hidden sm:block" data-btn-expand-text>
                  Copy Code
                </span>
              </button>
            </div>
          </div>
        )}
        <AppCode
          class={`${!showPreview ? 'py-7! px-4 max-h-full' : 'p-4 max-h-70'}`}
          data-astro-code
          code={original}
          lang={lang}
        />
        {!showPreview && (
          <button class="btn btn-icon p-0 absolute top-3 right-3" data-btn-copy-secondary>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24">
              <path
                fill="currentColor"
                d="M9 18q-.825 0-1.412-.587T7 16V4q0-.825.588-1.412T9 2h9q.825 0 1.413.588T20 4v12q0 .825-.587 1.413T18 18zm0-2h9V4H9zm-4 6q-.825 0-1.412-.587T3 20V7q0-.425.288-.712T4 6t.713.288T5 7v13h10q.425 0 .713.288T16 21t-.288.713T15 22zm4-6V4z"
              />
            </svg>
          </button>
        )}
      </div>
    )
  }
</div>

<script>
  (() => {
    const codeBlocks = document.querySelectorAll('.code-block');

    codeBlocks.forEach((codeBlock) => {
      const expandBtn = codeBlock.querySelector('[data-btn-expand]');
      const copyBtn = codeBlock.querySelector('[data-btn-copy]');
      const copyBtnSecondary = codeBlock.querySelector('[data-btn-copy-secondary]');

      const expandBtnText = expandBtn?.querySelector('[data-btn-expand-text]');
      const copyBtnText = copyBtn?.querySelector('[data-btn-expand-text]');
      const codeContainer = codeBlock.querySelector('[data-astro-code]');
      const expandSpan = document.createElement('span');
      const copySpan = document.createElement('span');
      expandBtn?.prepend(expandSpan);
      copyBtn?.prepend(copySpan);

      const expandIcon = `
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24">
      <path fill="currentColor" d="m12 19.15l3.875-3.875q.3-.3.7-.3t.7.3t.3.713t-.3.712l-3.85 3.875q-.575.575-1.425.575t-1.425-.575L6.7 16.7q-.3-.3-.288-.712t.313-.713t.713-.3t.712.3zm0-14.3L8.15 8.7q-.3.3-.7.288t-.7-.288q-.3-.3-.312-.712t.287-.713l3.85-3.85Q11.15 2.85 12 2.85t1.425.575l3.85 3.85q.3.3.288.713t-.313.712q-.3.275-.7.288t-.7-.288z"/>
      </svg>`;
      const collapseIcon = `
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24">
      <path fill="currentColor" d="m12 17.4l-3.9 3.9q-.275.275-.7.275t-.7-.275t-.275-.7t.275-.7l3.875-3.875q.575-.575 1.425-.575t1.425.575L17.3 19.9q.275.275.275.7t-.275.7t-.7.275t-.7-.275zm0-10.8l3.9-3.9q.275-.275.7-.275t.7.275t.275.7t-.275.7l-3.875 3.875Q12.85 8.55 12 8.55t-1.425-.575L6.7 4.1q-.275-.275-.275-.7t.275-.7t.7-.275t.7.275z"/>
      </svg>`;
      const copyIcon = `
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24">
      <path fill="currentColor" d="M9 18q-.825 0-1.412-.587T7 16V4q0-.825.588-1.412T9 2h9q.825 0 1.413.588T20 4v12q0 .825-.587 1.413T18 18zm0-2h9V4H9zm-4 6q-.825 0-1.412-.587T3 20V7q0-.425.288-.712T4 6t.713.288T5 7v13h10q.425 0 .713.288T16 21t-.288.713T15 22zm4-6V4z"/>
      </svg>`;
      const copyCheckIcon = `
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"><path fill="currentColor" d="m9.55 15.15l8.475-8.475q.3-.3.7-.3t.7.3t.3.713t-.3.712l-9.175 9.2q-.3.3-.7.3t-.7-.3L4.55 13q-.3-.3-.288-.712t.313-.713t.713-.3t.712.3z"/></svg>`;

      expandSpan.innerHTML = expandIcon;
      copySpan.innerHTML = copyIcon;

      let expanded = false;
      let revertTimer: ReturnType<typeof setTimeout> | null = null;

      // Expand/collapse
      expandBtn?.addEventListener('click', () => {
        expanded = !expanded;
        if (expandBtnText) {
          expandBtnText.textContent = expanded ? 'Collapse Code' : 'Expand Code';
        }
        expandSpan.innerHTML = expanded ? collapseIcon : expandIcon;
        if (codeContainer) {
          (codeContainer as HTMLElement).style.maxHeight = expanded ? '100%' : '17.5rem';
        }
      });

      // Copy to clipboard
      const handleCopy = (copyBtn?: Element, copyIconElement?: Element, copyBtnText?: Element) => {
        copyBtn?.addEventListener('click', async () => {
          if (!codeContainer || !copyBtn) return;

          const codeText = ((codeContainer as HTMLElement).innerText ?? codeContainer.textContent ?? '').trim();
          if (!codeText) return;

          try {
            await navigator.clipboard.writeText(codeText);

            if (copyIconElement) copyIconElement.innerHTML = copyCheckIcon;
            if (copyBtnText) copyBtnText.textContent = 'Copied';

            if (revertTimer) clearTimeout(revertTimer);
            revertTimer = setTimeout(() => {
              if (copyIconElement) copyIconElement.innerHTML = copyIcon;
              if (copyBtnText) copyBtnText.textContent = 'Copy Code';
            }, 1600);
          } catch (err) {
            if (copyBtnText) copyBtnText.textContent = 'Copy failed';
          }
        });
      };

      if (copyBtn && copyBtnText) {
        handleCopy(copyBtn, copySpan, copyBtnText);
      }
      if (copyBtnSecondary) {
        handleCopy(copyBtnSecondary, copyBtnSecondary);
      }
    });
  })();
</script>
