---
import ActivityChart from './cards/ActivityChart.astro';
import AddressInfields from './cards/AddressInfields.astro';
import BluePalette from './cards/BluePalette.astro';
import CSSVariables from './cards/CSSVariables.astro';
import EcoCard from './cards/EcoCard.astro';
import EventList from './cards/EventList.astro';
import HoursChart from './cards/HoursChart.astro';
import JSCode from './cards/JSCode.astro';
import Members from './cards/Members.astro';
import ModeToggleCard from './cards/ModeToggleCard.astro';
import MonthlyProfitChart from './cards/MonthlyProfitChart.astro';
import Preferences from './cards/Preferences.astro';
import ProfileCard from './cards/ProfileCard.astro';
import TimePicker from './cards/TimePicker.astro';
import Uploader from './cards/Uploader.astro';
---

<ul class="m-0 p-0 relative w-170 h-180 flex items-center justify-center overflow-hidden">
  <li class="slide absolute w-full h-54">
    <div class="w-54 h-54 absolute left-0">
      <EventList />
    </div>
    <div class="w-112 h-54 absolute right-0">
      <Uploader />
    </div>
  </li>
  <li class="slide absolute w-full h-54">
    <div class="w-54 h-54 absolute right-0">
      <HoursChart />
    </div>
    <div class="w-112 h-54 absolute left-0">
      <EcoCard />
    </div>
  </li>
  <li class="slide absolute w-full h-54">
    <div class="w-54 h-54 absolute left-0">
      <TimePicker />
    </div>
    <div class="w-112 h-54 absolute right-0">
      <JSCode />
    </div>
  </li>
  <li class="slide absolute w-full h-54">
    <div class="w-112 h-54 absolute left-0">
      <BluePalette />
    </div>
    <div class="w-54 h-54 absolute right-0">
      <AddressInfields />
    </div>
  </li>
  <li class="slide absolute w-full h-54">
    <div class="w-54 h-54 absolute left-0">
      <ProfileCard />
    </div>
    <div class="w-54 h-54 absolute left-1/2 transform -translate-x-1/2">
      <MonthlyProfitChart />
    </div>
    <div class="w-54 h-54 absolute right-0">
      <Preferences />
    </div>
  </li>
  <li class="slide absolute w-full h-54">
    <div class="w-54 h-54 absolute left-0">
      <Members />
    </div>
    <div class="w-112 h-54 absolute right-0">
      <ModeToggleCard />
    </div>
  </li>
  <li class="slide absolute w-full h-54">
    <div class="w-112 h-54 absolute left-0">
      <CSSVariables />
    </div>
    <div class="w-54 h-54 absolute right-0">
      <ActivityChart />
    </div>
  </li>
  <li class="slide absolute w-full h-54">
    <div class="w-54 h-54 absolute right-0">
      <HoursChart />
    </div>
    <div class="w-112 h-54 absolute left-0">
      <EcoCard />
    </div>
  </li>
  <li class="slide absolute w-full h-54">
    <div class="w-112 h-54 absolute left-0">
      <BluePalette />
    </div>
    <div class="w-54 h-54 absolute right-0">
      <AddressInfields />
    </div>
  </li>
  <li class="slide absolute w-full h-54">
    <div class="w-54 h-54 absolute left-0">
      <ProfileCard />
    </div>
    <div class="w-54 h-54 absolute left-1/2 transform -translate-x-1/2">
      <MonthlyProfitChart />
    </div>
    <div class="w-54 h-54 absolute right-0">
      <Preferences />
    </div>
  </li>
  <li class="slide absolute w-full h-54">
    <div class="w-54 h-54 absolute left-0">
      <Members />
    </div>
    <div class="w-112 h-54 absolute right-0">
      <ModeToggleCard />
    </div>
  </li>
  <li class="slide absolute w-full h-54">
    <div class="w-112 h-54 absolute left-0">
      <CSSVariables />
    </div>
    <div class="w-54 h-54 absolute right-0">
      <ActivityChart />
    </div>
  </li>
</ul>

<style>
  .slide {
    position: absolute;
    backface-visibility: hidden;
  }
</style>

<script>
  import gsap from 'gsap';

  const slides = gsap.utils.toArray('.slide');
  const slideCount = slides.length;
  const radius = 570;

  gsap.to(
    {},
    {
      duration: 12,
      repeat: -1,
      onUpdate: () => {
        const t = gsap.globalTimeline.time() / 20;
        slides.forEach((slide, i) => {
          const angle = (i / slideCount + t) * Math.PI * 2;

          const y = Math.sin(angle) * radius;
          // const scale = 0.5 + 0.5 * Math.cos(angle);
          const opacity = 0.3 + 0.7 * Math.cos(angle);

          gsap.set(slide as EventTarget, { y, opacity });
        });
      },
    },
  );

  // import gsap from 'gsap';

  // const container = document.querySelector<HTMLElement>('.hero-anim-container');
  // const slides = gsap.utils.toArray<HTMLElement>('.slide');
  // const slideCount = slides.length;
  // const radius = 580;

  // let time = 0;
  // const speed = 0.001;
  // let paused = false;

  // gsap.ticker.add(() => {
  //   if (!paused) time += speed;

  //   slides.forEach((slide, i) => {
  //     const angle = (i / slideCount + time) * Math.PI * 2;
  //     const y = Math.sin(angle) * radius;
  //     const opacity = 0.3 + 0.7 * Math.cos(angle);

  //     gsap.set(slide, { y, opacity, pointerEvents: opacity <= 0.05 ? 'none' : 'auto' });
  //   });
  // });

  // if (container) {
  //   container.addEventListener('mouseenter', () => {
  //     paused = true;
  //   });
  //   container.addEventListener('mouseleave', () => {
  //     paused = false;
  //   });
  // }

  //   v1 =============================
  // import gsap from 'gsap';

  // const container = document.querySelector('.hero-anim-container') as HTMLElement;
  // const slides = gsap.utils.toArray<HTMLElement>('.slide');
  // const slideCount = slides.length;
  // const radius = 580;

  // const tween = gsap.to(
  //   {},
  //   {
  //     duration: 18,
  //     repeat: -1,
  //     ease: 'none',
  //     onUpdate: function () {
  //       // use totalTime instead of progress for smooth clock
  //       const t = (this.totalTime() / this.duration()) % 1;

  //       slides.forEach((slide, i) => {
  //         const angle = (i / slideCount + t) * Math.PI * 2;
  //         const y = Math.sin(angle) * radius;
  //         const opacity = 0.3 + 0.7 * Math.cos(angle);

  //         gsap.set(slide, {
  //           y,
  //           opacity,
  //           pointerEvents: opacity <= 0.05 ? 'none' : 'auto',
  //         });
  //       });
  //     },
  //   },
  // );

  // if (container) {
  //   container.addEventListener('mouseenter', () => tween.pause());
  //   container.addEventListener('mouseleave', () => tween.resume());
  // }

  //----------------------------------------

</script>

  