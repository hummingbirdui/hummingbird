---
import ActivityChart from './cards/ActivityChart.astro';
import AddressInfields from './cards/AddressInfields.astro';
import BluePalette from './cards/BluePalette.astro';
import CSSVariables from './cards/CSSVariables.astro';
import EcoCard from './cards/EcoCard.astro';
import EventList from './cards/EventList.astro';
import HoursChart from './cards/HoursChart.astro';
import JSCode from './cards/JSCode.astro';
import Members from './cards/Members.astro';
import ModeToggleCard from './cards/ModeToggleCard.astro';
import MonthlyProfitChart from './cards/MonthlyProfitChart.astro';
import Preferences from './cards/Preferences.astro';
import ProfileCard from './cards/ProfileCard.astro';
import TimePicker from './cards/TimePicker.astro';
import Uploader from './cards/Uploader.astro';
---

<div id="animContainer" class="relative mx-auto 2xl:mx-0 w-112 2xl:w-170 h-180 hidden xl:flex shrink-0">
  <div id="col9" class="w-full h-81 absolute -top-81">
    <div class="w-112 h-54 absolute top-0 right-0 hidden 2xl:block">
      <ModeToggleCard />
    </div>
    <div class="w-54 h-54 absolute top-0 right-0 2xl:hidden">
      <HoursChart />
    </div>
    <div class="w-54 h-54 absolute bottom-0 left-0">
      <Members />
    </div>
  </div>
  <div id="col8" class="w-full h-81 absolute -top-81">
    <div class="w-112 h-54 absolute top-0 left-0 hidden 2xl:block">
      <CSSVariables />
    </div>
    <div class="w-54 h-54 absolute top-0 left-0 2xl:hidden">
      <ActivityChart />
    </div>
    <div class="w-54 h-54 absolute bottom-0 right-0">
      <AddressInfields />
    </div>
  </div>
  <div id="col7" class="w-full h-81 absolute -top-81">
    <div class="w-54 h-54 absolute top-0 left-0 hidden 2xl:block">
      <EventList />
    </div>
    <div class="w-112 h-54 absolute bottom-0 right-0">
      <Uploader />
    </div>
  </div>
  <div id="col6" class="w-full h-81 absolute -top-81">
    <div class="w-54 h-54 absolute top-0 right-0 hidden 2xl:block">
      <HoursChart />
    </div>
    <div class="w-112 h-54 absolute bottom-0 left-0">
      <EcoCard />
    </div>
  </div>
  <div id="col5" class="w-full h-81 absolute -top-81">
    <div class="w-54 h-54 absolute top-0 left-0">
      <TimePicker />
    </div>
    <div class="w-112 h-54 absolute bottom-0 right-0 hidden 2xl:block">
      <JSCode />
    </div>
    <div class="w-54 h-54 absolute bottom-0 right-0 2xl:hidden">
      <ActivityChart />
    </div>
  </div>
  <div id="col4" class="w-full h-81 absolute -top-81">
    <div class="w-112 h-54 absolute top-0 left-0">
      <BluePalette />
    </div>
    <div class="w-54 h-54 absolute bottom-0 right-0 hidden 2xl:block">
      <Preferences />
    </div>
  </div>
  <div id="col3" class="w-full h-81 2xl:h-108 absolute -top-81 2xl:-top-108">
    <div class="w-54 h-54 absolute top-0 left-0">
      <ProfileCard />
    </div>
    <div class="w-54 h-54 absolute bottom-0 right-0 2xl:top-27 2xl:left-1/2 2xl:transform 2xl:-translate-x-1/2">
      <MonthlyProfitChart />
    </div>
    <div class="w-54 h-54 absolute bottom-0 right-0 hidden 2xl:block">
      <Members />
    </div>
  </div>
  <div id="col2" class="w-full h-81 absolute -top-81">
    <div class="w-112 h-54 absolute top-0 right-0">
      <ModeToggleCard />
    </div>
    <div class="w-54 h-54 absolute bottom-0 left-0 xl:hidden 2xl:block">
      <Members />
    </div>
  </div>
  <div id="col1" class="w-full h-81 absolute -top-81">
    <div class="w-112 h-54 absolute top-0 left-0">
      <CSSVariables />
    </div>
    <div class="w-54 h-54 absolute bottom-0 right-0 xl:hidden 2xl:block">
      <ActivityChart />
    </div>
  </div>
</div>

<script>
  import gsap from 'gsap';

  const columns = ['col1', 'col2', 'col3', 'col4', 'col5', 'col6', 'col7', 'col8', 'col9'];
  const columnTimelines: gsap.core.Timeline[] = [];
  let boxTweens: gsap.core.Tween[] = [];

  const CONTAINER_H = 720;
  const DURATION = 7;
  const STAGGER = 3.5;
  const CYCLE = columns.length * STAGGER;
  const REPEAT_DELAY = CYCLE - DURATION;
  const EXIT_DURATION = DURATION * 0.275;

  columns.forEach((id, i) => {
    const el = document.getElementById(id) as HTMLElement;
    if (!el) return;

    const colH = el.offsetHeight;
    const START_TOP = -colH;
    const OUT_TOP = CONTAINER_H;
    const boxes = el.querySelectorAll<HTMLElement>(':scope > div');
    const originalPositions: number[] = [];

    boxes.forEach((box) => {
      const topVal = parseFloat(getComputedStyle(box).top || '0');
      originalPositions.push(topVal);
    });

    gsap.set(el, { clearProps: 'transform', top: START_TOP });

    const moveDistance = CONTAINER_H - colH - START_TOP;
    const moveDuration = DURATION * 0.6;
    const columnSpeed = moveDistance / moveDuration;

    const maxPause = STAGGER - EXIT_DURATION;

    const tl = gsap.timeline({
      repeat: -1,
      delay: i * STAGGER,
      repeatDelay: REPEAT_DELAY,
      defaults: { ease: 'none' },
    });

    tl.fromTo(el, { top: START_TOP - 15 }, { top: CONTAINER_H - colH - 20, duration: moveDuration })

      .add(() => {
        boxTweens.forEach((tw) => tw.kill());
        boxTweens = [];

        if (boxes.length === 0) return;

        boxes.forEach((box, idx) => {
          const startTop = parseFloat(getComputedStyle(box).top || '0');
          const boxH = box.offsetHeight;
          const distance = colH - boxH - startTop;

          const duration = distance / columnSpeed;

          const tween = gsap.to(box, {
            top: colH - boxH,
            duration,
            ease: 'none',
          });
          boxTweens.push(tween);
        });

        const maxDuration = Math.max(...boxTweens.map((tw) => tw.duration()));
        (el.dataset as DOMStringMap).pauseDuration = String(maxDuration);
      })

      .to(el, {
        top: CONTAINER_H - colH - 20,
        duration: () => parseFloat((el.dataset as DOMStringMap).pauseDuration || String(DURATION * 0.2)),
      })

      .to(el, { top: OUT_TOP, duration: EXIT_DURATION })

      .add(() => {
        boxes.forEach((box, idx) => {
          gsap.set(box, { top: originalPositions[idx] });
        });
      });

    columnTimelines.push(tl);
  });

  const container = document.getElementById('animContainer') as HTMLElement;
  container.addEventListener('mouseenter', () => {
    columnTimelines.forEach((tl) => tl.pause());
    boxTweens.forEach((tw) => tw.pause());
  });
  container.addEventListener('mouseleave', () => {
    columnTimelines.forEach((tl) => tl.resume());
    boxTweens.forEach((tw) => tw.resume());
  });
</script>
